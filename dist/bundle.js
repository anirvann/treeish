"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _objectSpread(r){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.forEach(function(e){_defineProperty(r,e,t[e])})}return r}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var r=0,t=new Array(e.length);r<e.length;r++)t[r]=e[r];return t}}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}var TreeUtil=function e(r,t){var l=this;_classCallCheck(this,e),_defineProperty(this,"defOptions",{parentId:"pid",id:"id",rootId:"root",rootName:"root"}),_defineProperty(this,"findNodeById",function(e){return _flattenedTree[e]?_flattenedTree[e]:errorGenerator("ID_NOT_FOUND")}),_defineProperty(this,"findAllNodesByProperty",function(r,t){return Object.values(_flattenedTree).filter(function(e){return e.model[r]===t})}),_defineProperty(this,"flattenArray",function(e){var r;return(r=[]).concat.apply(r,_toConsumableArray(e))}),_defineProperty(this,"getNestedNodes",function(e){var r=[];return r.push({model:e.model}),e.children.length?flattenArray(r.concat(flattenArray(e.children.map(function(e){return getNestedNodesByProperty(e)})))):r}),_defineProperty(this,"getNestedNodesByProperty",function(e,r,t){return getNestedNodes(e).filter(function(e){return e.model[r]===t})}),_defineProperty(this,"updateNodes",function(e,t){Array.isArray(e)?"function"!=typeof t&&errorGenerator("NOT_A_FUNCTION"):errorGenerator("NOT_AN_ARRAY"),level+=1,e.map(function(e,r){return t(e,level),0<e.children.length&&updateNodes(e.children,t),e})}),_defineProperty(this,"generateTree",function(e,r){var n=r.rootId,t=r.rootName,o=r.id,i=r.parentId,a=l.modelGen,d={model:{id:n,name:t},children:[]};Array.isArray(e)||errorGenerator("NOT_AN_ARRAY");var s=e.map(a).reduce(function(e,r){return e[r.model[o]]=r,e},{});return Object.keys(s).map(function(e){if(s[e].model.hasOwnProperty(i))if(s[e].model[i].toString()===n.toString())d.children.push(s[e]);else{var r=s[e].model[i],t=s[r]?s[r]:errorGenerator("ROOTID_REQUIRED");t.children=t.children.concat(s[e])}else d.children.push(s[e]);return!1}),0===d.children.length&&errorGenerator("TREE_FAILED"),{tree:d,flattenedTree:s}}),_defineProperty(this,"maxDepth",function(){var n=1,o=l._flattenedTree,i=l.options;return Object.keys(o).forEach(function(e){for(var r=1,t=o[e].model;t.hasOwnProperty(i.parentId)&&t[i.parentId]!==i.rootId;)r++,t=o[t[i.parentId]].model;n<r&&(n=r)}),n}),_defineProperty(this,"errorGenerator",function(e){switch(e){case"NOT_AN_ARRAY":throw new Error("Collection type is not an Array");case"TREE_FAILED":throw new Error("Tree construction has failed");case"ID_NOT_FOUND":throw new Error("ID supplied is incorrect");case"NOT_A_FUNCTION":throw new Error("Callback supplied isnt a function");case"ROOTID_REQUIRED":throw new Error("Root ID is required as every node has a parent ID present");default:throw new Error("Generic error message")}}),_defineProperty(this,"modelGen",function(e){return _objectSpread({model:_objectSpread({},e)},{children:[]})}),this.options=_objectSpread({},this.defOptions,t);var n=this.generateTree(r,this.options),o=n.tree,i=n.flattenedTree;this._tree=o,this._flattenedTree=i;var a=this.maxDepth();return this._tree.findNodeById=this.findNodeById,this._tree.updateNodes=this.updateNodes,this._tree.findAllNodesByProperty=this.findAllNodesByProperty,this._tree.getNestedNodesByProperty=this.getNestedNodesByProperty,this._tree.maxDepth=a,this._tree};module.exports=TreeUtil;
